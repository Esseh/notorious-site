{{define "getbackups"}}
<!-- Main Quill library -->
<script src="//cdn.quilljs.com/1.1.5/quill.min.js"></script>
<link rel="stylesheet" href="/assets/css/main.css"/>

<!-- Theme included stylesheets -->

<head>
<link href="/assets/css/documentviewcore.css" rel="stylesheet">
<link href="/assets/css/documentviewsnow.css" rel="stylesheet">
<link href="/assets/css/documentviewbubble.css" rel="stylesheet">
<link href="/assets/css/backup.css" rel="stylesheet">

<script src="//cdn.quilljs.com/1.1.5/quill.core.js"></script>
<script src="https://cdn.quilljs.com/1.0.0/quill.js"></script>
</head>
{{ template "header" .HeaderData}}
<body>

<div id="dropdown">
  {{$ctx := .HeaderData.Ctx}}
  <button onclick="myFunction()" class="dropbtn">Collaborators</button>
  <div id="myDropdown" class="dropdown-content">
  <a id ="collabLink" href="?TargetEmail={{.OwnerNote.Email}}">{{.OwnerNote.First}} {{.OwnerNote.Last}}</a>
  {{range $i, $e := .Note.Collaborators}}
  {{$d := (getUser $ctx $e)}}
  <a id ="collabLink" href="?TargetEmail={{$d.Email}}">{{$d.First}} {{$d.Last}}</a>
  {{end}}
  </div>
</div>
<div id="returnLink">
<a id="return" href="">Back to View</a>
<script>
document.getElementById("return").setAttribute("href", "/view" + window.location.pathname.slice(7))
</script>
</div>
<div id="profile">
  {{ if .Owner.Avatar }}
  <label id="user-picture">{{ template "user-avatar" .Owner}}</label>
  {{ else }}
  <label id="user-picture" class="fa fa-user"></label>
  {{ end }}
  <div id="doctitle">
  {{.Backup.Title}}
  </div>
  <span>Created by: <a href = "/profile/{{.Owner.IntID}}">{{.Owner.First}} {{.Owner.Last}} </a></span>
</div>
<div class="box">


{{.Backuphtml}}
</div>

<!-- Include Quill stylesheet -->

<link href="/assets/css/quill.bubble.css" rel="stylesheet">
<link href="/assets/css/quill.core.css" rel="stylesheet">
<link href="/assets/css/quill.snow.css" rel="stylesheet">


<form>
</body>

<script src="https://cdn.quilljs.com/1.0.0/quill.js"></script>

<!-- Initialize Quill editor -->
<script>

document.getElementById("clickMe").onclick = function () { post('/document',{title: document.getElementById("title").value ,note: editor.container.firstChild.innerHTML}); };



var toolbarOptions = [
  ['bold', 'italic', 'underline', 'strike'],        // toggled buttons
  ['blockquote', 'code-block', 'video', 'image'],

  [{ 'header': 1 }, { 'header': 2 }],               // custom button values
  [{ 'list': 'ordered'}, { 'list': 'bullet' }],
  [{ 'script': 'sub'}, { 'script': 'super' }],      // superscript/subscript
  [{ 'indent': '-1'}, { 'indent': '+1' }],          // outdent/indent
  [{ 'direction': 'rtl' }],                         // text direction

  [{ 'size': ['small', false, 'large', 'huge'] }],  // custom dropdown
  [{ 'header': [1, 2, 3, 4, 5, 6, false] }],

  [{ 'color': [] }, { 'background': [] }],          // dropdown with defaults from theme
  [{ 'font': [] }],
  [{ 'align': [] }],

  ['clean']                                         // remove formatting button
];


  var editor = new Quill('#editor', {
    modules: { toolbar: toolbarOptions },
    theme: 'snow'
  });

//submission form
// alert("test")
// document.getElementById("submit").onclick = post('/document',{note: editor.container.firstChild.innerHTML});
//
// var el = document.getElementById("submit");
// if (el.addEventListener)
//     el.addEventListener("click", post('/document',{note: editor.container.firstChild.innerHTML}), false);
// else if (el.attachEvent)
//     el.attachEvent('onclick', post('/document',{note: editor.container.firstChild.innerHTML}));


// 	// Store accumulated changes
// var change = new Delta();
// quill.on('text-change', function(delta) {
//   change = change.compose(delta);
// });
//
// // Save periodically
// setInterval(function() {
//   if (change.length() > 0) {
//     console.log('Saving changes', change);
//     /*
//     Send partial changes
//     $.post('/your-endpoint', {
//       partial: JSON.stringify(change)
//     });
//
//     Send entire document
//     $.post('/your-endpoint', {
//       doc: JSON.stringify(quill.getContents())
//     });
//     */
//     change = new Delta();
//   }
// }, 5*1000);
//
// // Check for unsaved data
// window.onbeforeunload = function() {
//   if (change.length() > 0) {
//     return 'There are unsaved changes. Are you sure you want to leave?';
//   }

function post(path, params, method) {
    method = "post";

    var form = document.createElement("form");
    form.setAttribute("method", method);
    form.setAttribute("action", path);

    for(var key in params) {
        if(params.hasOwnProperty(key)) {
            var hiddenField = document.createElement("input");
            hiddenField.setAttribute("type", "hidden");
            hiddenField.setAttribute("name", key);
            hiddenField.setAttribute("value", params[key]);

            form.appendChild(hiddenField);
         }
    }

    document.body.appendChild(form);
    form.submit();
}


</script>
<script>
/* When the user clicks on the button,
toggle between hiding and showing the dropdown content */
function myFunction() {
    document.getElementById("myDropdown").classList.toggle("show");
}

// Close the dropdown if the user clicks outside of it
window.onclick = function(event) {
  if (!event.target.matches('.dropbtn')) {

    var dropdowns = document.getElementsByClassName("dropdown-content");
    var i;
    for (i = 0; i < dropdowns.length; i++) {
      var openDropdown = dropdowns[i];
      if (openDropdown.classList.contains('show')) {
        openDropdown.classList.remove('show');
      }
    }
  }
}

</script>
{{end}}
